<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Timeouts on Hori</title>
    <link>//localhost:1313/ko/tags/timeouts/</link>
    <description>Recent content in Timeouts on Hori</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ko</language>
    <lastBuildDate>Sun, 01 Jun 2025 00:00:00 +0000</lastBuildDate><atom:link href="//localhost:1313/ko/tags/timeouts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>타임아웃</title>
      <link>//localhost:1313/ko/modules/timeouts/</link>
      <pubDate>Sun, 01 Jun 2025 00:00:00 +0000</pubDate>
      
      <guid>//localhost:1313/ko/modules/timeouts/</guid>
      <description>&lt;h1&gt;타임아웃&lt;/h1&gt;

&lt;p&gt;Linkerd는 메시 내 서비스 간 HTTP 요청 및 TCP 연결의 수명을 세밀하게 제어할 수 있도록 다양한 타임아웃 설정을 제공합니다. 쿠버네티스 서비스 애너테이션을 통해 다음 세 가지 기본 타임아웃 정책을 설정할 수 있습니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;timeout.linkerd.io/request:&lt;/strong&gt; 클라이언트가 요청을 전송한 순간부터 서버가 요청 본문의 첫 바이트를 수신할 때까지의 최대 시간&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;timeout.linkerd.io/response:&lt;/strong&gt; 서버 응답 헤더의 첫 바이트를 받은 순간부터 전체 응답 본문이 전달될 때까지의 최대 시간&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;timeout.linkerd.io/idle:&lt;/strong&gt; 요청·응답 데이터 프레임 사이에 트래픽이 없을 때 연결을 닫기 전까지 허용되는 최대 유휴 시간&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;사전 요구 사항&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;Unix-스타일 셸이 가능한 macOS/Linux/Windows&lt;/li&gt;
&lt;li&gt;로컬 쿠버네티스 클러스터용 k3d(v5+)&lt;/li&gt;
&lt;li&gt;kubectl(v1.25+)&lt;/li&gt;
&lt;li&gt;Helm(v3+)&lt;/li&gt;
&lt;li&gt;인증서 생성을 위한 Smallstep(step) CLI&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;튜토리얼&lt;/h1&gt;


&lt;h2&gt;1. 구성 파일 생성&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;cat &amp;lt;&amp;lt; &#39;EOF&#39; &amp;gt; cluster.yaml
apiVersion: k3d.io/v1alpha5
kind: Simple
metadata:
  name: &amp;quot;cluster&amp;quot;
servers: 1
agents: 0
image: rancher/k3s:v1.33.0-k3s1
network: playground
options:
  k3s:
    extraArgs:
      - arg: --disable=traefik
        nodeFilters: [&amp;quot;server:*&amp;quot;]
      - arg: --cluster-cidr=10.23.0.0/16
        nodeFilters: [&amp;quot;server:*&amp;quot;]
      - arg: --service-cidr=10.247.0.0/16
        nodeFilters: [&amp;quot;server:*&amp;quot;]
      - arg: --debug
        nodeFilters: [&amp;quot;server:*&amp;quot;]
ports:
  - port: 8081:80
    nodeFilters: [&amp;quot;loadbalancer&amp;quot;]
EOF
cat &amp;lt;&amp;lt; &#39;EOF&#39; &amp;gt; application.yaml
apiVersion: v1
kind: Pod
metadata:
  name: client
  namespace: simple-app
  annotations:
    linkerd.io/inject: enabled
spec:
  containers:
  - name: curl
    image: curlimages/curl:latest
    command: [&amp;quot;sleep&amp;quot;, &amp;quot;infinity&amp;quot;]
---
apiVersion: v1
kind: Namespace
metadata:
  name: simple-app
  annotations:
    linkerd.io/inject: enabled
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: server
  namespace: simple-app
spec:
  replicas: 1
  selector:
    matchLabels:
      app: server
      version: v1
  template:
    metadata:
      labels:
        app: server
        version: v1
    spec:
      containers:
        - name: http-app
          image: kong/httpbin:latest
          ports:
            - containerPort: 80
---
apiVersion: v1
kind: Service
metadata:
  name: server
  namespace: simple-app
spec:
  selector:
    app: server
    version: v1
  ports:
    - port: 80
      targetPort: 80
EOF
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;2. 로컬 쿠버네티스 클러스터 생성&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;cluster.yaml&lt;/code&gt;을 이용해 k3d로 가벼운 쿠버네티스 클러스터를 띄웁니다:&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>